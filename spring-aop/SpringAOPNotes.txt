Spring AOP Tutorial – Aspect, Advice, Pointcut, JoinPoint, Annotations, XML Configuration:

Some of the common crosscutting concerns are logging, transaction management, data validation.
In Object Oriented Programming, modularity of application is achieved by Classes whereas in Aspect Oriented Programming application modularity is achieved by Aspects and they are configured to cut across different classes.

We can have a separate class for logging but again the functional classes will have to call these methods to achieve logging across the application.

Spring AOP takes out the direct dependency of crosscutting tasks from classes that we can’t achieve through normal object oriented programming model. For example, we can have a separate class for logging but again the functional classes will have to call these methods to achieve logging across the application.

aspect: An aspect is a class that implements enterprise application concerns that cut across multiple classes, such as transaction management. Aspects can be a normal class configured through Spring XML configuration or we can use Spring AspectJ integration to define a class as Aspect using @Aspect annotation.

Join Point: A join point is the specific point in the application such as method execution, exception handling, changing object variable values etc. In Spring AOP a join points is always the execution of a method.

Advice: Advices are actions taken for a particular join point. In terms of programming, they are methods that gets executed when a certain join point with matching pointcut is reached in the application. You can think of Advices as Struts2 interceptors or Servlet Filters.

Pointcut: Pointcut are expressions that is matched with join points to determine whether advice needs to be executed or not. Pointcut uses different kinds of expressions that are matched with the join points and Spring framework uses the AspectJ pointcut expression language.

Target Object: They are the object on which advices are applied. Spring AOP is implemented using runtime proxies so this object is always a proxied object. What it means is that a subclass is created at runtime where the target method is overridden and advices are included based on their configuration.

AOP proxy: Spring AOP implementation uses JDK dynamic proxy to create the Proxy classes with target classes and advice invocations, these are called AOP proxy classes. We can also use CGLIB proxy by adding it as the dependency in the Spring AOP project.

Weaving: It is the process of linking aspects with other objects to create the advised proxy objects. This can be done at compile time, load time or at runtime. Spring AOP performs weaving at the runtime.
----------------------------------------------------------------------------------------------------------------------------------------------------------------
AOP Advice Types:
Based on the execution strategy of advices, they are of following types:

Before Advice: These advices runs before the execution of join point methods. We can use @Before annotation to mark an advice type as Before advice.

After (finally) Advice: An advice that gets executed after the join point method finishes executing, whether normally or by throwing an exception. We can create after advice using @After annotation.

After Returning Advice: Sometimes we want advice methods to execute only if the join point method executes normally. We can use @AfterReturning annotation to mark a method as after returning advice.

After Throwing Advice: This advice gets executed only when join point method throws exception, we can use it to rollback the transaction declaratively. We use @AfterThrowing annotation for this type of advice.

Around Advice: This is the most important and powerful advice. This advice surrounds the join point method and we can also choose whether to execute the join point method or not. We can write advice code that gets executed before and after the execution of the join point method. It is the responsibility of around advice to invoke the join point method and return values if the method is returning something. We use @Around annotation to create around advice methods.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

For using Spring AOP in Spring beans, we need to do following:

1. Declare AOP namespace like xmlns:aop=”http://www.springframework.org/schema/aop”
2. Add aop:aspectj-autoproxy element to enable Spring AspectJ support with auto proxy at runtime
3. Configure Aspect classes as other Spring beans.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

-> Aspect classes are required to have @Aspect annotation.
-> @Before annotation is used to create Before advice
-> The string parameter passed in the @Before annotation is the Pointcut expression getNameAdvice() advice will execute for any Spring Bean method with 
   signature public String getName(). 
-> This is a very important point to remember, if we will create Employee bean using new operator the advices will not be applied. Only when we will use 
   ApplicationContext to get the bean, advices will be applied.
-> We can use asterisk (*) as wild card in Pointcut expressions, getAllAdvice() will be applied for all the classes in com.journaldev.spring.service package 
   whose name starts with get and doesn’t take any arguments.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
-> Sometimes we have to use same Pointcut expression at multiple places, we can create an empty method with @Pointcut annotation and then use it as expression 
   in advices.
